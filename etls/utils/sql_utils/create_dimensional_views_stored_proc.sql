BEGIN
    DECLARE stmt,myvar, users_query, cards_query, groups_query, channels_query, custom_fields_query, organizations_query, roles_query, teams_query, badges_query,structures_query,user_profiles_query,teams_users_query,comments_query,structured_items_query,user_metrics_aggregations_query,card_pack_relations_query,journey_pack_relations_query,channels_cards_query,user_custom_fields_query,user_onboardings_query,profiles_query,card_reportings_query,skills_users_query,clcs_query,quizzes_query,assignments_query,team_assignments_query,user_content_completions_query, badging_query, taggings_query, user_roles_query, card_custom_fields_query, job_family_roles_query, job_family_role_skills_query, user_job_family_roles_query, user_job_family_role_skills_query, skills_details_query, skill_assessments_query, skill_category_level_courses_query, card_languages_query , card_relations_query STRING DEFAULT NULL;  -- envPrefix,OrgId
    DECLARE index DEFAULT 0;
    DECLARE  ddls array<STRING>;
    -- DECLARE OrgId string DEFAULT '15';
    -- DECLARE orgDataset string DEFAULT 'edc_qa_analytics_customer_15';
    -- DECLARE envPrefix string default'qa_';
    BEGIN
        EXECUTE IMMEDIATE FORMAT("""CREATE SCHEMA if not exists `%s` OPTIONS(description='this is for org %s')""", orgDataset, orgDataset);
    EXCEPTION WHEN ERROR THEN
        SELECT @@error.message, @@error.statement_text;
    END;

    SET users_query = """CREATE OR REPLACE VIEW @orgDataset.users_dim_m_v  as SELECT avatar_content_type, avatar_file_name, avatar_file_size, TIMESTAMP(users.avatar_updated_at) as avatar_updated_at, bio, configs, TIMESTAMP(users.confirmation_sent_at) as confirmation_sent_at, TIMESTAMP(users.confirmed_at) as confirmed_at, coverimage_content_type, coverimage_file_name, coverimage_file_size, TIMESTAMP(users.coverimage_updated_at) as coverimage_updated_at, TIMESTAMP(users.created_at) as created_at, TIMESTAMP(users.current_sign_in_at) as current_sign_in_at, current_sign_in_ip, data_export_status, default_team_id, TIMESTAMP(users.deleted_at) as deleted_at, email, failed_attempts, federated_identifier, first_name, handle, id, job_role_id, TIMESTAMP(users.last_data_export_time) as last_data_export_time, last_name, TIMESTAMP(users.last_sign_in_at) as last_sign_in_at, last_sign_in_ip, location_id, TIMESTAMP(users.locked_at) as locked_at, CONCAT(first_name, ' ', last_name) as name, organization_id as org_id_s, organization_role, parent_user_id, sign_in_count, TIMESTAMP(users.sign_out_at) as sign_out_at, status, time_in_role, unconfirmed_email, TIMESTAMP(users.updated_at) as updated_at, welcome_token, cast(is_brand as bool) is_brand, cast(password_reset_required as bool) password_reset_required, cast(is_complete as bool) is_complete, cast(is_active as bool) is_active, cast(showcase as bool) showcase, cast(is_suspended as bool) is_suspended, cast(is_edcast_admin as bool) is_edcast_admin, cast(exclude_from_leaderboard as bool) exclude_from_leaderboard, cast(is_anonymized as bool) is_anonymized, cast(invitation_accepted as bool) invitation_accepted, cast(hide_from_leaderboard as bool) hide_from_leaderboard, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S', TIMESTAMP_MILLIS(users.record_insert_time)) as record_insert_time, cast(yr as STRING) yr, cast(month as STRING) month, day, cast(hour as STRING) hour FROM `@ENV_PREFIXeddata_system.users` users  where organization_id=@OrgId;""";
    SET cards_query = """CREATE OR REPLACE VIEW @orgDataset.cards_dim_m_v  as select  answers_count, author_first_name, author_id, author_last_name, author_picture_url, authoritative_all_time_views_count, bookmarks_count, card_subtype, CASE WHEN card_type IS NULL or card_type = ''  THEN '' WHEN card_type='pack'  THEN 'Pathway' WHEN card_type='video_stream'  THEN 'Video Stream' ELSE  INITCAP(card_type)  END as card_type, cards_config_id, client_id, client_item_id, comments_count, TIMESTAMP(cards.created_at) as created_at, TIMESTAMP(cards.deleted_at) as deleted_at, TRIM( CASE WHEN duration < 60  THEN 'less than a minute' ELSE  CONCAT( if((EXTRACT(year from date(TIMESTAMP_SECONDS(duration))) - 1970) != 0, CONCAT(EXTRACT(year from date(TIMESTAMP_SECONDS(duration))) - 1970, ' year(s)'), ''), if(MOD(CAST(FLOOR(UNIX_DATE(date(TIMESTAMP_SECONDS(duration))) / 30) as INT64), 12) != 0, CONCAT(MOD(CAST(FLOOR(UNIX_DATE(date(TIMESTAMP_SECONDS(duration))) / 30) as INT64), 12), ' Month(s)'), ''), if(CAST(FLOOR(MOD(UNIX_DATE(date(TIMESTAMP_SECONDS(duration))), 30) / 7) as INT64) != 0, CONCAT(CAST(FLOOR(MOD(UNIX_DATE(date(TIMESTAMP_SECONDS(duration))), 30) / 7) as INT64), ' Week(s)'), ''), if(MOD(MOD(UNIX_DATE(date(TIMESTAMP_SECONDS(duration))), 30), 7) != 0, CONCAT(MOD(MOD(UNIX_DATE(date(TIMESTAMP_SECONDS(duration))), 30), 7), ' Day(s)'), ''), if(EXTRACT(hour from time(TIMESTAMP_SECONDS(duration))) != 0, CONCAT(EXTRACT(hour from time(TIMESTAMP_SECONDS(duration))), ' Hour(s)'), ''), if(EXTRACT(minute from time(TIMESTAMP_SECONDS(duration))) != 0, CONCAT(EXTRACT(minute from time(TIMESTAMP_SECONDS(duration))), ' minute(s)'), ''), if(EXTRACT(second from time(TIMESTAMP_SECONDS(duration))) != 0, CONCAT(EXTRACT(second from time(TIMESTAMP_SECONDS(duration))), ' second(s)'), '') ) END ) as duration, ecl_id, ecl_metadata, card_metadata.unique_code as unique_code, CASE WHEN source_id is NULL THEN JSON_VALUE(ecl_metadata, '$.source_id') ELSE source_id END AS source_id, CASE WHEN external_id is NULL THEN JSON_VALUE(ecl_metadata, '$.external_id') ELSE external_id END AS external_id, card_metadata.plan AS plan, cast(card_metadata.average_rating as FLOAT64) AS average_rating, card_metadata.content_platform AS content_platform, JSON_VALUE(ecl_metadata, '$.source_display_name') AS source_display_name, JSON_VALUE(ecl_metadata, '$.source_type_name') AS source_type_name, JSON_VALUE(ecl_metadata, '$.source_logo_url') AS source_logo_url, cast(JSON_VALUE(ecl_metadata, '$.promotion') as BOOLEAN) AS promotion, cast(JSON_VALUE(ecl_metadata, '$.discount') as BOOLEAN) AS discount, cast(JSON_VALUE(ecl_metadata, '$.allow_enrollment') as BOOLEAN) AS allow_enrollment, SUBSTR(card_metadata.custom_data, 1, 4000) AS custom_data, CASE WHEN ecl_source_name IS NULL or ecl_source_name = ''  THEN '' WHEN ecl_source_name='UGC'  THEN 'User Generated Content' ELSE  INITCAP(ecl_source_name)   END as ecl_source_name, expansions_count, features, filestack, group_id, cards.id, impressions_count, language, INITCAP(level) as card_level, SUBSTR(CONCAT(UPPER(SUBSTRING(message,1,1)),LOWER(SUBSTRING(message,2))), 1, 4000)  as message, order_index, organization_id as org_id_s, duration  as original_duration, outbounds_count, plays_count, TIMESTAMP(cards.promoted_at) as promoted_at, provider, provider_image, TIMESTAMP(cards.published_at) as published_at, readable_card_type, resource_id, shares_count, slug, standard_type, INITCAP(state) as state, super_card_id, taxonomy_topics, SUBSTR(CONCAT(UPPER(SUBSTRING(COALESCE(NULLIF(title, ''), message), 1, 1)),LOWER(SUBSTRING(COALESCE(NULLIF(title, ''), message), 2))), 1, 4000)  as title, TIMESTAMP(cards.updated_at) as updated_at, user_taxonomy_topics, votes_count, cast(is_public as bool) is_public, cast(is_manual as bool) is_manual, cast(hidden as bool) hidden, cast(is_official as bool) is_official, cast(can_be_reanswered as bool) can_be_reanswered, cast(auto_complete as bool) auto_complete, cast(is_paid as bool) is_paid, cast(is_taxonomy_generated as bool) is_taxonomy_generated, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S', TIMESTAMP_MILLIS(cards.record_insert_time)) as record_insert_time, CAST(cards.yr as STRING) yr, CAST(cards.month as STRING) month, cards.day day, CAST(cards.hour as STRING) hour from \`@ENV_PREFIXeddata_system.cards\` cards left join \`@ENV_PREFIXeddata_system.card_metadata\` card_metadata  on cards.id=card_metadata.card_id where organization_id=@OrgId;""";
    SET groups_query = """CREATE OR REPLACE VIEW @orgDataset.groups_dim_m_v as select  access, client_id, client_resource_id, course_code, course_data_url, course_term, TIMESTAMP(g.created_at) as created_at, creator_id, description, TIMESTAMP(end_date) as end_date, id, image_url, language, name, organization_id as org_id_s, parent_id, picture_content_type, picture_file_name, picture_file_size, TIMESTAMP(g.picture_updated_at) as picture_updated_at, TIMESTAMP(start_date) start_date, topic_id, type, TIMESTAMP(g.updated_at) as updated_at, users_count, website_url, cast(details_locked as bool) details_locked, cast(close_access as bool) close_access, cast(is_private as bool) is_private, cast(connect_to_social_mediums as bool) connect_to_social_mediums,cast(enable_mobile_app_download_buttons as bool) enable_mobile_app_download_buttons, cast(share_to_social_mediums as bool) share_to_social_mediums, cast(daily_digest_enabled as bool) daily_digest_enabled, cast(forum_notifications_enabled as bool) forum_notifications_enabled, cast(is_promoted as bool) is_promoted, cast(is_hidden as bool) is_hidden, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S', TIMESTAMP_MILLIS(g.record_insert_time)) as record_insert_time, cast(yr as STRING) yr, cast(month as STRING) month, day, cast(hour as STRING) hour from \`@ENV_PREFIXeddata_system.groups\` g where   organization_id=@OrgId;""";
    SET channels_query = """CREATE OR REPLACE VIEW @orgDataset.channels_dim_m_v as select  card_fetch_limit, card_query_id, client_id, content_discovery_freq, content_type, TIMESTAMP(channels.created_at) as created_at, description, group_id, id, image_content_type, image_file_name, image_file_size, TIMESTAMP(channels.image_updated_at) as image_updated_at, keywords, label, language, TIMESTAMP(channels.last_discovered_at) as last_discovered_at, mobile_image_content_type, mobile_image_file_name, mobile_image_file_size, TIMESTAMP(channels.mobile_image_updated_at) as mobile_image_updated_at, organization_id as org_id_s, parent_id, provider, provider_image, slug, topics, TIMESTAMP(channels.updated_at) as updated_at, user_id, cast(visible as bool) visible, cast(is_private as bool) is_private, cast(autopull_content as bool) autopull_content, cast(show_authors as bool) show_authors, cast(visible_during_onboarding as bool) visible_during_onboarding, cast(only_authors_can_post as bool) only_authors_can_post, cast(is_general as bool) is_general, cast(is_promoted as bool) is_promoted, cast(auto_follow as bool) auto_follow, cast(ecl_enabled as bool) ecl_enabled, cast(curate_only as bool) curate_only, cast(is_open as bool) is_open, cast(curate_ugc as bool) curate_ugc, cast(allow_follow as bool) allow_follow, cast(shareable as bool) shareable, cast(auto_pin_cards as bool) auto_pin_cards, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S', TIMESTAMP_MILLIS(channels.record_insert_time)) as record_insert_time, cast(yr as STRING) yr, cast(month as STRING) month, day, cast(hour as STRING) hour from \`@ENV_PREFIXeddata_system.channels\` channels    where organization_id=@OrgId;""";
    SET custom_fields_query = """CREATE OR REPLACE VIEW @orgDataset.custom_fields_dim_m_v as  SELECT id, organization_id as org_id_s, abbreviation, display_name, TIMESTAMP(custom_fields.created_at) as created_at, TIMESTAMP(custom_fields.updated_at) as updated_at, cast(enable_people_search as boolean) enable_people_search, ifnull(custom_fields.data_type, 0) as data_type, custom_fields.field_type, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S', TIMESTAMP_MILLIS(custom_fields.record_insert_time)) as record_insert_time, cast(yr as STRING) yr, cast(month as STRING) month, day, cast(hour as STRING) hour from \`@ENV_PREFIXeddata_system.custom_fields\` custom_fields    where organization_id=@OrgId;""";
    SET organizations_query = """CREATE OR REPLACE VIEW @orgDataset.organizations_dim_m_v as  SELECT  host_name, TIMESTAMP(organizations.co_branding_logo_updated_at) as co_branding_logo_updated_at, mobile_image_content_type, name, co_branding_mobile_logo_content_type, co_branding_mobile_logo_file_size, TIMESTAMP(organizations.co_branding_mobile_logo_updated_at) as co_branding_mobile_logo_updated_at, client_id, comments_count, custom_domain, users_count, redirect_uri, co_branding_logo_file_name, co_branding_mobile_logo_file_name, TIMESTAMP(organizations.favicon_updated_at) as favicon_updated_at, TIMESTAMP(organizations.mobile_image_updated_at) as mobile_image_updated_at, favicon_file_name, TIMESTAMP(organizations.splash_image_updated_at) as splash_image_updated_at, savannah_app_id, co_branding_logo_content_type, image_content_type, co_branding_logo_file_size, TIMESTAMP(organizations.created_at) as created_at, TIMESTAMP(organizations.updated_at) as updated_at, status, platform_domain, splash_image_content_type, splash_image_file_size, image_file_name, slug, favicon_file_size, TIMESTAMP(organizations.image_updated_at) as image_updated_at, description, mobile_image_file_name, id as org_id_s, favicon_content_type, image_file_size, splash_image_file_name, mobile_image_file_size, cast(is_registrable as bool) is_registrable, cast(send_weekly_activity as bool) send_weekly_activity, cast(show_sub_brand_on_login as bool) show_sub_brand_on_login, cast(social_enabled as bool) social_enabled, cast(xapi_enabled as bool) xapi_enabled, cast(show_onboarding as bool) show_onboarding, cast(enable_role_based_authorization as bool) enable_role_based_authorization, cast(enable_analytics_reporting as bool) enable_analytics_reporting, cast(whitelabel_build_enabled as bool) whitelabel_build_enabled, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S', TIMESTAMP_MILLIS(organizations.record_insert_time)) as record_insert_time, cast(yr as STRING) yr, cast(month as STRING) month, day, cast(hour as STRING) hour from \`@ENV_PREFIXeddata_system.organizations\` organizations    where id=@OrgId;""";
    SET roles_query = """CREATE OR REPLACE VIEW @orgDataset.roles_dim_m_v as SELECT  id, name, organization_id as org_id_s, cast(master_role as bool) master_role, TIMESTAMP(roles.created_at) as created_at, TIMESTAMP(roles.updated_at) as updated_at, image_url, threshold, default_name, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S', TIMESTAMP_MILLIS(roles.record_insert_time)) as record_insert_time, cast(yr as STRING) yr, cast(month as STRING) month, day, cast(hour as STRING) hour  FROM \`@ENV_PREFIXeddata_system.roles\` roles    where organization_id=@OrgId;""";
    SET teams_query = """CREATE OR REPLACE VIEW @orgDataset.teams_dim_m_v as   SELECT  domains, image_file_name, name, slug, image_content_type, TIMESTAMP(teams.image_updated_at) as image_updated_at, description, id, source_ids, image_file_size, organization_id as org_id_s, comments_count, TIMESTAMP(teams.created_at) as created_at, TIMESTAMP(teams.updated_at) as updated_at, cast(is_everyone_team as bool) is_everyone_team, cast(auto_assign_content as bool) auto_assign_content, cast(is_private as bool) is_private, cast(is_dynamic as bool) is_dynamic, cast(is_mandatory as bool) is_mandatory, cast(only_admin_can_post as bool) only_admin_can_post, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S', TIMESTAMP_MILLIS(teams.record_insert_time)) as record_insert_time, cast(yr as STRING) yr, cast(month as STRING) month, day, cast(hour as STRING) hour FROM \`@ENV_PREFIXeddata_system.teams\` teams    where organization_id=@OrgId;""";
    SET badges_query = """CREATE OR REPLACE VIEW @orgDataset.badges_dim_m_v as  SELECT id, organization_id as org_id_s, type, TIMESTAMP(badges.created_at) as created_at, TIMESTAMP(badges.updated_at) as updated_at, image_file_name, image_content_type, image_file_size, TIMESTAMP(badges.image_updated_at) as image_updated_at, image_social_file_name, image_social_content_type, image_social_file_size, TIMESTAMP(badges.image_social_updated_at) as image_social_updated_at, cast(is_default as bool) is_default, image_original_url, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S', TIMESTAMP_MILLIS(badges.record_insert_time)) as record_insert_time, cast(yr as STRING) yr, cast(month as STRING) month, day, cast(hour as STRING) hour FROM \`@ENV_PREFIXeddata_system.badges\` badges    where organization_id=@OrgId;""";
    SET structures_query = """CREATE OR REPLACE VIEW @orgDataset.structures_dim_m_v as SELECT id, creator_id, organization_id as org_id_s, parent_id, parent_type, display_name, context, slug, cast(enabled as bool) enabled, TIMESTAMP(structures.created_at) as created_at, TIMESTAMP(updated_at) updated_at, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S', TIMESTAMP_MILLIS(structures.record_insert_time)) as record_insert_time, cast(yr as STRING) yr, cast(month as STRING) month, day, cast(hour as STRING) hour  FROM \`@ENV_PREFIXeddata_system.structures\` structures     where organization_id=@OrgId;""";
    SET user_profiles_query = """CREATE OR REPLACE VIEW @orgDataset.user_profiles_fact_m_v as SELECT  user_profiles.id, users.organization_id as org_id_s, user_id, SUBSTR(expert_topics, 1, 4000) as expert_topics, SUBSTR(learning_topics, 1, 4000) as learning_topics, TIMESTAMP(user_profiles.created_at) as created_at, TIMESTAMP(user_profiles.updated_at) as updated_at, hr_job_role_id, hr_organization_id, hr_location_id, hr_competency_id, hr_domain_id, time_zone, SUBSTR(onboarding_options, 1, 4000) as onboarding_options,  language, cast(tac_accepted as bool) tac_accepted, job_title, dashboard_info, company, job_role, TIMESTAMP(dob) as dob, TIMESTAMP(user_profiles.tac_accepted_at) as tac_accepted_at, gender, mobile_number, work_country, domain, cast(mobile_verified as bool) mobile_verified, occupation_id, occupations.name as occupation_name, category as occupation_category, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S', TIMESTAMP_MILLIS(user_profiles.record_insert_time)) as record_insert_time, CAST(user_profiles.yr AS STRING) yr, CAST(user_profiles.month AS STRING) month, user_profiles.day, CAST(user_profiles.hour AS STRING) hour FROM \`@ENV_PREFIXeddata_system.user_profiles\` user_profiles INNER JOIN \`@ENV_PREFIXeddata_system.occupations\` occupations ON occupations.id = user_profiles.occupation_id  LEFT JOIN \`@ENV_PREFIXeddata_system.users\` users ON user_profiles.user_id = users.id where users.organization_id=@OrgId;""";
    SET teams_users_query = """CREATE OR REPLACE VIEW @orgDataset.teams_users_fact_m_v as SELECT  teams_users.id, team_id, organization_id as org_id_s, user_id, as_type, TIMESTAMP(teams_users.created_at) as created_at, TIMESTAMP(teams_users.updated_at) as updated_at, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S', TIMESTAMP_MILLIS(teams_users.record_insert_time)) as record_insert_time, cast(teams_users.yr as STRING) yr, cast(teams_users.month as STRING) month, teams_users.day, cast(teams_users.hour as STRING) hour FROM \`@ENV_PREFIXeddata_system.teams_users\` teams_users LEFT JOIN \`@ENV_PREFIXeddata_system.users\` users ON teams_users.user_id=users.id where organization_id=@OrgId;""";
    SET comments_query = """CREATE OR REPLACE VIEW @orgDataset.comments_fact_m_v as SELECT comments.id, SUBSTR(message, 1, 4000) as message, type, organization_id as org_id_s, commentable_id, commentable_type, user_id, TIMESTAMP(comments.created_at) as created_at, TIMESTAMP(comments.updated_at) as updated_at, votes_count, resource_id, cast(hidden as bool) hidden, cast(anonymous as bool) anonymous, cast(is_mobile as bool) is_mobile, client_item_id, comments_count, TIMESTAMP(comments.deleted_at) as deleted_at, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S', TIMESTAMP_MILLIS(comments.record_insert_time)) as record_insert_time, cast(comments.yr as STRING) yr, cast(comments.month as STRING) month, comments.day, cast(comments.hour as STRING) hour FROM \`@ENV_PREFIXeddata_system.comments\` comments left join \`@ENV_PREFIXeddata_system.users\` users on comments.user_id = users.id where organization_id=@OrgId;""";
    SET structured_items_query = """CREATE OR REPLACE VIEW @orgDataset.structured_items_fact_m_v as SELECT  structured_items.id, structure_id, entity_id, entity_type, cast(structured_items.enabled as bool) enabled, TIMESTAMP(structured_items.created_at) as created_at, TIMESTAMP(structured_items.updated_at) as updated_at, position, organization_id as org_id_s, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S', TIMESTAMP_MILLIS(structured_items.record_insert_time)) as record_insert_time, cast(structured_items.yr as STRING) yr, cast(structured_items.month as STRING) month, structured_items.day, cast(structured_items.hour as STRING) hour FROM \`@ENV_PREFIXeddata_system.structured_items\` structured_items left join \`@ENV_PREFIXeddata_system.structures\` structures on  structured_items.structure_id = structures.id where organization_id=@OrgId;""";
    SET user_metrics_aggregations_query = """CREATE OR REPLACE VIEW @orgDataset.user_metrics_aggregations_fact_m_v as SELECT  id, organization_id as org_id_s, user_id, total_user_score, time_spent_minutes, TIMESTAMP(user_metrics_aggregations.updated_at) as updated_at, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S', TIMESTAMP_MILLIS(user_metrics_aggregations.record_insert_time)) as record_insert_time, cast(yr as STRING) yr, cast(month as STRING) month, day, cast(hour as STRING) hour FROM \`@ENV_PREFIXeddata_system.user_metrics_aggregations\` user_metrics_aggregations where organization_id=@OrgId;""";
    SET card_pack_relations_query = """CREATE OR REPLACE VIEW @orgDataset.card_pack_relations_dim_m_v as SELECT  SUBSTR(cp.title, 1, 4000) as card_title,  CASE WHEN c1.title is null or c1.title = ''  THEN  SUBSTR(c1.message, 1, 4000) ELSE SUBSTR(c1.title, 1, 4000) END as smart_title,  CASE WHEN c.title is null or c.title = ''  THEN  SUBSTR(c.message, 1, 4000)  ELSE  SUBSTR(c.title, 1, 4000)  END as pathway_title, CASE WHEN c1.card_type IS NULL or c.card_type = ''  THEN '' WHEN c1.card_type='pack'  THEN 'Pathway' WHEN c1.card_type='video_stream'  THEN 'Video Stream' ELSE  INITCAP(c1.card_type) END card_type, cp.cover_id as pathway_id, cp.from_id as card_id, c.state as card_state,  TIMESTAMP(cp.updated_at) updated_at, c.organization_id as org_id_s, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S', TIMESTAMP_MILLIS(cp.record_insert_time)) as record_insert_time, cast(cp.yr as STRING) yr, cast(cp.month as STRING) month, cp.day, cast(cp.hour as STRING) hour FROM \`@ENV_PREFIXeddata_system.card_pack_relations\` cp inner join \`@ENV_PREFIXeddata_system.cards\` c on c.id = cp.cover_id  inner join \`@ENV_PREFIXeddata_system.cards\` c1 on c1.id = cp.from_id where c.organization_id=@OrgId;""";
    SET journey_pack_relations_query = """CREATE OR REPLACE VIEW @orgDataset.journey_pack_relations_dim_m_v as SELECT jp.cover_id as journey_id, jp.from_id as card_id,  c.state as card_state,  CASE WHEN c1.title is null or c1.title = ''  THEN SUBSTR(c1.message, 1, 4000)  ELSE SUBSTR(c1.title, 1, 4000) END as smart_title,  CASE WHEN c.title is null or c.title = ''  THEN SUBSTR(c.message, 1, 4000)  ELSE SUBSTR(c.title, 1, 4000) END as journey_title,  CASE WHEN c.card_type IS NULL or c.card_type = ''  THEN '' WHEN c.card_type='pack'  THEN 'Pathway' WHEN c.card_type='video_stream'  THEN 'Video Stream' ELSE  INITCAP(c.card_type)  END as card_type,  TIMESTAMP(jp.updated_at) updated_at, c.organization_id as org_id_s, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S', TIMESTAMP_MILLIS(jp.record_insert_time)) as record_insert_time, cast(jp.yr as STRING) yr, cast(jp.month as STRING) month, jp.day, cast(jp.hour as STRING) hour FROM \`@ENV_PREFIXeddata_system.journey_pack_relations\`  jp  INNER JOIN \`@ENV_PREFIXeddata_system.cards\` c  ON c.id = jp.cover_id  INNER JOIN \`@ENV_PREFIXeddata_system.cards\` c1  ON c1.id = jp.from_id  WHERE c.deleted_at is NULL and c1.deleted_at is NULL and c.organization_id=@OrgId;""";
    SET channels_cards_query = """CREATE OR REPLACE VIEW @orgDataset.channels_cards_dim_m_v as SELECT c.id as card_id, CASE WHEN c.title IS NULL or c.title = ''  THEN SUBSTR(c.message , 1, 4000) ELSE SUBSTR(c.title , 1, 4000) END as card_title, CASE WHEN c.ecl_source_name IS NULL or c.ecl_source_name = ''  THEN '' WHEN c.ecl_source_name='UGC'  THEN 'User Generated Content' ELSE INITCAP(ecl_source_name) END as ecl_source_name,  c.card_type, c.state as card_state,c1.id as channel_id, c1.label as channel_name, c.card_subtype, c.slug, TIMESTAMP(c.created_at) as created_at, p.object_id, TIMESTAMP(cc.updated_at) as updated_at, c.organization_id as org_id_s, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S', TIMESTAMP_MILLIS(c.record_insert_time)) as record_insert_time, cast(c.yr as STRING) yr, cast(c.month as STRING) month, c.day, cast(c.hour as STRING) hour FROM \`@ENV_PREFIXeddata_system.cards\` c  LEFT JOIN \`@ENV_PREFIXeddata_system.channels_cards\` cc  ON cc.card_id = c.id  LEFT JOIN \`@ENV_PREFIXeddata_system.channels\` c1  ON c1.id = cc.channel_id  LEFT JOIN \`@ENV_PREFIXeddata_system.pins\`p  ON p.object_id = c.id  WHERE cc.state = 'curated' and c.organization_id=@OrgId;""";
    SET user_custom_fields_query = """CREATE OR REPLACE VIEW @orgDataset.user_custom_fields_dim_m_v as  SELECT user_custom_fields.id, user_custom_fields.user_id, user_custom_fields.custom_field_id,   SUBSTR(user_custom_fields.value, 1, 4000) as value, custom_fields.display_name, custom_fields.abbreviation,   cast(custom_fields.enable_people_search as bool) enable_people_search, TIMESTAMP(user_custom_fields.created_at) as created_at, TIMESTAMP(user_custom_fields.updated_at) as updated_at, users.organization_id as org_id_s, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S', TIMESTAMP_MILLIS(user_custom_fields.record_insert_time)) as record_insert_time, cast(user_custom_fields.yr as STRING) yr, cast(user_custom_fields.month as STRING) month, user_custom_fields.day, cast(user_custom_fields.hour as STRING) hour FROM \`@ENV_PREFIXeddata_system.user_custom_fields\` user_custom_fields  INNER JOIN \`@ENV_PREFIXeddata_system.custom_fields\` custom_fields  ON custom_fields.id = user_custom_fields.custom_field_id   INNER JOIN \`@ENV_PREFIXeddata_system.users\` users  ON users.id = user_custom_fields.user_id where users.organization_id=@OrgId;""";
    SET user_onboardings_query = """CREATE OR REPLACE VIEW @orgDataset.user_onboardings_dim_m_v as SELECT user_onboardings.id, user_id, current_step, user_onboardings.status, TIMESTAMP(user_onboardings.completed_at) as completed_at, TIMESTAMP(user_onboardings.created_at) as created_at, TIMESTAMP(user_onboardings.updated_at) as updated_at, users.organization_id as org_id_s, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S', TIMESTAMP_MILLIS(user_onboardings.record_insert_time)) as record_insert_time, cast(user_onboardings.yr as STRING) yr, cast(user_onboardings.month as STRING) month, user_onboardings.day, cast(user_onboardings.hour as STRING) hour FROM \`@ENV_PREFIXeddata_system.user_onboardings\` user_onboardings  INNER JOIN \`@ENV_PREFIXeddata_system.users\` users  ON users.id = user_onboardings.user_id where organization_id=@OrgId;""";
    SET profiles_query = """CREATE OR REPLACE VIEW @orgDataset.profiles_dim_m_v as SELECT profiles.id, user_id, external_id, uid, TIMESTAMP(profiles.created_at) as created_at, TIMESTAMP(profiles.updated_at) as updated_at, users.organization_id as org_id_s, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S', TIMESTAMP_MILLIS(profiles.record_insert_time)) as record_insert_time, cast(profiles.yr as STRING) yr, cast(profiles.month as STRING) month, profiles.day, cast(profiles.hour as STRING) hour FROM \`@ENV_PREFIXeddata_system.profiles\` profiles  INNER JOIN \`@ENV_PREFIXeddata_system.users\` users  ON users.id = profiles.user_id where users.organization_id=@OrgId;""";
    SET card_reportings_query = """CREATE OR REPLACE VIEW @orgDataset.card_reportings_dim_m_v as SELECT card_reportings.id, card_id, user_id, reason, TIMESTAMP(card_reportings.deleted_at) as deleted_at, TIMESTAMP(card_reportings.created_at) as created_at, TIMESTAMP(card_reportings.updated_at) as updated_at, card_reportings.status, users.organization_id as org_id_s, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S', TIMESTAMP_MILLIS(card_reportings.record_insert_time)) as record_insert_time, cast(card_reportings.yr as STRING) yr, cast(card_reportings.month as STRING) month, card_reportings.day, cast(card_reportings.hour as STRING) hour FROM \`@ENV_PREFIXeddata_system.card_reportings\` card_reportings INNER JOIN \`@ENV_PREFIXeddata_system.users\` users ON users.id = card_reportings.user_id  LEFT JOIN \`@ENV_PREFIXeddata_system.cards\` cards ON card_reportings.card_id = cards.id where cards.organization_id=@OrgId;""";
    SET skills_users_query = """CREATE OR REPLACE VIEW @orgDataset.skills_users_dim_m_v AS SELECT * EXCEPT (skill_col, cols), cols AS skills, trim( replace( CASE WHEN REGEXP_EXTRACT(cols,r'(?:topic_label:)(.*)') IS NOT NULL THEN REGEXP_EXTRACT(cols,r'(?:topic_label:)(.*)') WHEN REGEXP_EXTRACT(cols,r'(?:label:)(.*)') IS NOT NULL THEN REGEXP_EXTRACT(cols,r'(?:label:)(.*)') ELSE null END, '\\"', '')) as skill_label FROM ( SELECT skills_users.id, user_id, skill_id, description, SUBSTR(credential, 1, 4000) AS credential, TIMESTAMP(skills_users.created_at) AS created_at, TIMESTAMP(skills_users.updated_at) AS updated_at, experience, skill_level, credential_name, credential_url, TIMESTAMP(expiry_date) as expiry_date, TIMESTAMP(issue_date) as issue_date, issuer, credential_id, credential_type, CAST(verified AS bool) verified, score, skills_detail_id, skills_users.global_user_id, card_id, s.name AS skill_name, users.organization_id AS org_id_s, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S', TIMESTAMP_MILLIS(skills_users.record_insert_time)) AS record_insert_time, CAST(skills_users.yr AS STRING) yr, CAST(skills_users.month AS STRING) month, skills_users.day, CAST(skills_users.hour AS STRING) hour, REGEXP_EXTRACT_ALL(skills, r'(?:- )([^-]*)') AS skill_col FROM \`@ENV_PREFIXeddata_system.skills_users\` skills_users LEFT JOIN \`@ENV_PREFIXeddata_system.skills\` s ON s.id = skills_users.skill_id JOIN \`@ENV_PREFIXeddata_system.users\` users ON skills_users.user_id = users.id WHERE users.organization_id=@OrgId) DATA LEFT JOIN UNNEST(skill_col) cols;""";
    SET clcs_query = """CREATE OR REPLACE VIEW @orgDataset.clcs_dim_m_v as select  id, entity_id, entity_type, TIMESTAMP(from_date) as from_date, TIMESTAMP(to_date) as to_date, target_score, organization_id as org_id_s, target_steps, TIMESTAMP(clcs.deleted_at) as deleted_at, TIMESTAMP(clcs.created_at) as created_at, TIMESTAMP(clcs.updated_at) as updated_at, name, status, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S', TIMESTAMP_MILLIS(clcs.record_insert_time)) as record_insert_time, cast(yr as STRING) yr, cast(month as STRING) month, day, cast(hour as STRING) hour from \`@ENV_PREFIXeddata_system.clcs\` clcs where organization_id=@OrgId;""";
    SET quizzes_query = """CREATE OR REPLACE VIEW @orgDataset.quizzes_fact_m_v as SELECT  quizzes.id, organization_id as org_id_s, card_id, cast(reanswerable as bool) reanswerable, passing_criteria, TIMESTAMP(quizzes.created_at) as created_at, TIMESTAMP(quizzes.updated_at) as updated_at, cast(quizzes.mandatory as bool) mandatory, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S', TIMESTAMP_MILLIS(quizzes.record_insert_time)) as record_insert_time, cast(quizzes.yr as STRING) yr, cast(quizzes.month as STRING) month, quizzes.day, cast(quizzes.hour as STRING) hour FROM \`@ENV_PREFIXeddata_system.quizzes\` quizzes LEFT JOIN \`@ENV_PREFIXeddata_system.cards\` cards ON quizzes.card_id=cards.id where organization_id=@OrgId;""";
    SET assignments_query = """CREATE OR REPLACE VIEW @orgDataset.assignments_fact_m_v as SELECT  assignments.id, user_id, title, assignable_type, assignable_id, TIMESTAMP(assignments.created_at) as created_at, TIMESTAMP(assignments.updated_at) as updated_at, state, TIMESTAMP(assignments.started_at) as started_at, TIMESTAMP(assignments.completed_at) as completed_at, TIMESTAMP(assignments.due_at) as due_at, TIMESTAMP(start_date) as start_date, assignor_id, TIMESTAMP(assigned_date) as assigned_date, organization_id as org_id_s, TIMESTAMP(last_reminder_date) as last_reminder_date, assignment_priority, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S', TIMESTAMP_MILLIS(assignments.record_insert_time)) as record_insert_time, cast(assignments.yr as STRING) yr, cast(assignments.month as STRING) month, assignments.day, cast(assignments.hour as STRING) hour FROM \`@ENV_PREFIXeddata_system.assignments\` assignments left join \`@ENV_PREFIXeddata_system.users\` users on assignments.user_id= users.id  where organization_id=@OrgId;""";
    SET team_assignments_query = """CREATE OR REPLACE VIEW @orgDataset.team_assignments_fact_m_v as SELECT  team_assignments.id, team_assignments.assignment_id, team_assignments.team_id, TIMESTAMP(team_assignments.created_at) as created_at,  TIMESTAMP(team_assignments.updated_at) as updated_at, team_assignments.assignor_id, team_assignments.message, users.organization_id as org_id_s, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S', TIMESTAMP_MILLIS(team_assignments.record_insert_time)) as record_insert_time, cast(team_assignments.yr as STRING) yr, cast(team_assignments.month as STRING) month, team_assignments.day, cast(team_assignments.hour as STRING) hour FROM \`@ENV_PREFIXeddata_system.team_assignments\` team_assignments left join \`@ENV_PREFIXeddata_system.assignments\` assignments on team_assignments.assignment_id = assignments.id left join \`@ENV_PREFIXeddata_system.users\` users on assignments.user_id= users.id where organization_id=@OrgId;""";
    SET user_content_completions_query = """CREATE OR REPLACE VIEW @orgDataset.user_content_completions_dim_m_v as SELECT user_content_completions.user_id, user_content_completions.completable_id, TIMESTAMP(user_content_completions.completed_at) completed_at, user_content_completions.completed_percentage, user_content_completions.duration, TIMESTAMP(user_content_completions.updated_at) updated_at, user_content_completions.state, users.organization_id as org_id_s, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S', TIMESTAMP_MILLIS(user_content_completions.record_insert_time)) as record_insert_time, cast(user_content_completions.yr as STRING) yr, cast(user_content_completions.month as STRING) month, user_content_completions.day, cast(user_content_completions.hour as STRING) hour FROM \`@ENV_PREFIXeddata_system.user_content_completions\` user_content_completions INNER JOIN \`@ENV_PREFIXeddata_system.users\` users ON users.id = user_content_completions.user_id WHERE user_content_completions.completable_type='Card' and organization_id=@OrgId;""";
    SET badging_query = """CREATE OR REPLACE VIEW @orgDataset.badgings_dim_m_v  as SELECT badging.id, badging.title as badge_title, badging.badgeable_id as badgeable_card_id, badging.badge_id, badging.type as badge_type, badging.target_steps, badging.all_quizzes_answered, cards.organization_id as org_id_s, TIMESTAMP(badging.created_at) as time_badge_created, TIMESTAMP(badging.updated_at) as time_badge_last_updated, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S', TIMESTAMP_MILLIS(badging.record_insert_time)) as record_insert_time, cast(badging.yr as STRING) yr, cast(badging.month as STRING) month, badging.day, cast(badging.hour as STRING) hour from @ENV_PREFIXeddata_system.badgings as badging inner join @ENV_PREFIXeddata_system.cards as cards on badging.badgeable_id = cards.id where cards.deleted_at is null and organization_id=@OrgId;""";
    SET taggings_query = """CREATE OR REPLACE VIEW @orgDataset.taggings_dim_m_v  as select taggings.id, tags.id as tag_id, tags.name, taggings.taggable_id, TIMESTAMP(taggings.created_at) as created_at, TIMESTAMP(taggings.updated_at) as updated_at, TIMESTAMP(taggings.deleted_at) as deleted_at, c.organization_id as org_id_s, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S', TIMESTAMP_MILLIS(taggings.record_insert_time)) as record_insert_time, cast(taggings.yr as STRING) yr, cast(taggings.month as STRING) month, taggings.day, cast(taggings.hour as STRING) hour from @ENV_PREFIXeddata_system.taggings inner join @ENV_PREFIXeddata_system.tags on tags.id = taggings.tag_id inner join @ENV_PREFIXeddata_system.cards c on c.id = taggings.taggable_id where taggings.taggable_type = 'Card' and organization_id=@OrgId;""";
    SET user_roles_query = """CREATE OR REPLACE VIEW @orgDataset.user_roles_dim_m_v  as select ur.id, ur.user_id, ur.role_id, TIMESTAMP(ur.created_at) as created_at, TIMESTAMP(ur.updated_at) as updated_at, TIMESTAMP(ur.deleted_at) as deleted_at, users.organization_id as org_id_s, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S', TIMESTAMP_MILLIS(ur.record_insert_time)) as record_insert_time, cast(ur.yr as STRING) yr, cast(ur.month as STRING) month, ur.day, cast(ur.hour as STRING) hour from @ENV_PREFIXeddata_system.user_roles ur join @ENV_PREFIXeddata_system.users on ur.user_id = users.id where organization_id=@OrgId;""";
    SET card_custom_fields_query = """CREATE OR REPLACE VIEW @orgDataset.card_custom_fields_dim_m_v  as select card_custom_fields.id, card_custom_fields.custom_field_id, card_custom_fields.card_id, card_custom_fields.value, TIMESTAMP(card_custom_fields.created_at) as created_at, TIMESTAMP(card_custom_fields.updated_at) as updated_at, cards.organization_id as org_id_s, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S', TIMESTAMP_MILLIS(card_custom_fields.record_insert_time)) as record_insert_time, cast(card_custom_fields.yr as STRING) yr, cast(card_custom_fields.month as STRING) month, card_custom_fields.day, cast(card_custom_fields.hour as STRING) hour from @ENV_PREFIXeddata_system.card_custom_fields inner join @ENV_PREFIXeddata_system.cards on cards.id = card_custom_fields.card_id where organization_id=@OrgId;""";
    SET job_family_roles_query = """CREATE OR REPLACE VIEW @orgDataset.job_family_roles_dim_m_v as SELECT jfr.id, jfr.job_family_id, jf.name as job_family_name, jf.default_name as job_family_default_name, jfr.job_role_id, jr.title as job_role_title, TIMESTAMP(jfr.created_at) as created_at, TIMESTAMP(jfr.updated_at) as updated_at, jfr.organization_id as org_id_s, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S', TIMESTAMP_MILLIS(jfr.record_insert_time)) as record_insert_time, cast(jfr.yr as STRING) yr, cast(jfr.month as STRING) month, jfr.day, cast(jfr.hour as STRING) hour FROM \`@ENV_PREFIXeddata_system.job_family_roles\` jfr LEFT JOIN \`@ENV_PREFIXeddata_system.job_families\` jf ON jfr.job_family_id = jf.id LEFT JOIN \`@ENV_PREFIXeddata_system.job_roles\` jr ON jfr.job_role_id = jr.id where organization_id=@OrgId;""";
    SET job_family_role_skills_query = """CREATE OR REPLACE VIEW @orgDataset.job_family_role_skills_dim_m_v as SELECT id, skill_level, job_family_role_id, skills_detail_id, skill_id, skill_category_id, TIMESTAMP(created_at) as created_at, TIMESTAMP(updated_at) as updated_at, organization_id as org_id_s, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S', TIMESTAMP_MILLIS(record_insert_time)) as record_insert_time, cast(yr as STRING) yr, cast(month as STRING) month, day, cast(hour as STRING) hour FROM \`@ENV_PREFIXeddata_system.job_family_role_skills\` where organization_id=@OrgId;""";
    SET user_job_family_roles_query = """CREATE OR REPLACE VIEW @orgDataset.user_job_family_roles_dim_m_v as SELECT ujfr.id, ujfr.job_family_role_id, ujfr.user_id, TIMESTAMP(ujfr.created_at) as created_at, TIMESTAMP(ujfr.updated_at) as updated_at, users.organization_id as org_id_s, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S', TIMESTAMP_MILLIS(ujfr.record_insert_time)) as record_insert_time, cast(ujfr.yr as STRING) yr, cast(ujfr.month as STRING) month, ujfr.day, cast(ujfr.hour as STRING) hour FROM \`@ENV_PREFIXeddata_system.user_job_family_roles\` ujfr LEFT JOIN \`@ENV_PREFIXeddata_system.users\` users ON ujfr.user_id = users.id where organization_id=@OrgId;""";
    SET user_job_family_role_skills_query = """CREATE OR REPLACE VIEW @orgDataset.user_job_family_role_skills_dim_m_v as SELECT id, skill_level, cast(course_percentage_complete as FLOAT64) as course_percentage_complete, user_id, learning_plan_activated, job_family_role_skill_id, TIMESTAMP(created_at) as created_at, TIMESTAMP(updated_at) as updated_at, organization_id as org_id_s, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S', TIMESTAMP_MILLIS(record_insert_time)) as record_insert_time, cast(yr as STRING) yr, cast(month as STRING) month, day, cast(hour as STRING) hour FROM \`@ENV_PREFIXeddata_system.user_job_family_role_skills\` where organization_id=@OrgId;""";
    SET skills_details_query = """CREATE OR REPLACE VIEW @orgDataset.skills_details_dim_m_v as SELECT sd.id, sd.skill_description, sd.skill_id, s.name as skill_name, sd.skill_category_id, sc.name as skill_category_name, sd.node_id, TIMESTAMP(sd.created_at) as created_at, TIMESTAMP(sd.updated_at) as updated_at, sd.organization_id as org_id_s, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S', TIMESTAMP_MILLIS(sd.record_insert_time)) as record_insert_time, cast(sd.yr as STRING) yr, cast(sd.month as STRING) month, sd.day, cast(sd.hour as STRING) hour FROM \`@ENV_PREFIXeddata_system.skills_details\` sd LEFT JOIN \`@ENV_PREFIXeddata_system.skills\` s ON sd.skill_id = s.id LEFT JOIN \`@ENV_PREFIXeddata_system.skill_categories\` sc ON sd.skill_category_id = sc.id where organization_id=@OrgId;""";
    SET skill_assessments_query = """CREATE OR REPLACE VIEW @orgDataset.skill_assessments_dim_m_v as SELECT sa.id, sa.user_id, sa.user_job_role_id, sa.skill_id, sa.skill_name, sa.assessed_by, sa.rating,  sa.status, SUBSTR(sa.invitation_message, 1, 4000) as invitation_message, TIMESTAMP(sa.due_at) as due_at, sa.skills_detail_id, TIMESTAMP(sa.last_reminder_date) as last_reminder_date, sa.skill_assessment_invitation_id, TIMESTAMP(sa.created_at) as created_at, TIMESTAMP(sa.updated_at) as updated_at, TIMESTAMP(sa.deleted_at) as deleted_at, users.organization_id  as org_id_s, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S', TIMESTAMP_MILLIS(sa.record_insert_time)) as record_insert_time, cast(sa.yr as STRING) yr, cast(sa.month as STRING) month, sa.day, cast(sa.hour as STRING) hour from \`@ENV_PREFIXeddata_system.skill_assessments\` sa LEFT JOIN \`@ENV_PREFIXeddata_system.users\` users ON sa.user_id = users.id where organization_id=@OrgId;""";
    SET skill_category_level_courses_query = """CREATE OR REPLACE VIEW @orgDataset.skill_category_level_courses_dim_m_v as SELECT id, skill_level, card_id, skill_level_description, skills_detail_id, skill_id, skill_category_id, TIMESTAMP(created_at) as created_at, TIMESTAMP(updated_at) as updated_at, organization_id as org_id_s, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S', TIMESTAMP_MILLIS(record_insert_time)) as record_insert_time, cast(yr as STRING) yr, cast(month as STRING) month, day, cast(hour as STRING) hour from \`@ENV_PREFIXeddata_system.skill_category_level_courses\` where organization_id=@OrgId;""";
    SET card_languages_query = """CREATE OR REPLACE VIEW @orgDataset.card_languages_dim_m_v as SELECT card_languages.id as id, card_languages.card_id as card_id, card_languages.resource_id as resource_id, card_languages.title as title, card_languages.message as message, card_languages.language as language, card_languages.custom_data as custom_data, TIMESTAMP(card_languages.deleted_at) as deleted_at, TIMESTAMP(card_languages.created_at) as created_at, TIMESTAMP(card_languages.updated_at) as updated_at, card_languages.media as media, card_languages.state as state, c.organization_id as org_id_s, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S', TIMESTAMP_MILLIS(card_languages.record_insert_time)) as record_insert_time, cast(card_languages.yr as STRING) yr, cast(card_languages.month as STRING) month, card_languages.day, cast(card_languages.hour as STRING) hour FROM \`@ENV_PREFIXeddata_system.card_languages\` card_languages left join \`@ENV_PREFIXeddata_system.cards\` as c on card_languages.card_id=c.id where organization_id=@OrgId;""";
    SET card_relations_query = """CREATE OR REPLACE VIEW @orgDataset.card_relations_dim_m_v as SELECT card_relations.id as id, card_relations.card_id as card_id, card_relations.root_id as root_id, card_relations.parent_id as parent_id, card_relations.name as name, TIMESTAMP(card_relations.created_at) as created_at, TIMESTAMP(card_relations.updated_at) as updated_at, card_relations.user_id as user_id, card_relations.state as state, card_relations.version_type as version_type, card_relations.change_log as change_log, c.organization_id as org_id_s, FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S', TIMESTAMP_MILLIS(card_relations.record_insert_time)) as record_insert_time, cast(card_relations.yr as STRING) yr, cast(card_relations.month as STRING) month, card_relations.day, cast(card_relations.hour as STRING) hour FROM \`@ENV_PREFIXeddata_system.card_relations\` card_relations left join \`@ENV_PREFIXeddata_system.cards\` as c on card_relations.card_id=c.id where organization_id=@OrgId;""";

    set ddls = (select array[ users_query, cards_query, groups_query, channels_query, custom_fields_query, roles_query, teams_query, badges_query, organizations_query, structures_query, user_profiles_query, teams_users_query, comments_query, structured_items_query, user_metrics_aggregations_query, card_pack_relations_query, journey_pack_relations_query, channels_cards_query, user_custom_fields_query, user_onboardings_query, profiles_query, card_reportings_query, skills_users_query, clcs_query,quizzes_query, assignments_query, team_assignments_query, user_content_completions_query, badging_query, taggings_query, user_roles_query, card_custom_fields_query, job_family_roles_query, job_family_role_skills_query, user_job_family_roles_query, user_job_family_role_skills_query, skills_details_query, skill_assessments_query, skill_category_level_courses_query] );

    WHILE index < ARRAY_LENGTH(ddls) DO
        BEGIN

        SET stmt = (select ddls[OFFSET(index)]);
        SET index = index + 1;
        EXECUTE IMMEDIATE  REPLACE(REPLACE(REPLACE(stmt, '@OrgId', OrgId),'@orgDataset',orgDataset),'@ENV_PREFIX',envPrefix);
        EXCEPTION WHEN ERROR THEN
        SELECT concat(@@error.message, @@error.statement_text) error_msg;
        END;
    END WHILE;
END